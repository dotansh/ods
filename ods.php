<?php
/**
 * A library for simple ods writng
 * Copyright (C) 2014 Dotan Shavit <dotan@shavitos.com>
 *
 * Based on files generated by LibreOffice Calc: http://www.libreoffice.org/
 *
 */

class odsXml {
	protected $samplesXml;
	protected $node;

	public function __construct(&$node) {
		$this->samplesXml = simplexml_load_file(__DIR__ . '/contentSamples.xml');
		$this->node = &$node;
	}

	protected function getSample($what, $attr = null, $value = null, $ns = null) {
		$result = $this->samplesXml->xpath($what);
		if (! $result) return NULL;
		if ($attr) {
			foreach ($result as $opt) {
				foreach ($opt->attributes($ns, true) as $optAttr => $optValue) {
					if ($optAttr == $attr && $optValue == $value) {
						return dom_import_simplexml($opt);
					}
				}
			}
		} else {
			return dom_import_simplexml($result[0]);
		}
	}

	protected function getChild($which) {
		foreach($this->node->childNodes as $child) {
			if ($child->nodeName == $which) {
				return $child;
			}
		}
		return null;
	}

	protected function appendToNode($origNode, $new) {
		$child = $origNode->appendChild($origNode->ownerDocument->importNode($new, true));
		return $child;
	}

	protected function append($new) {
		return $this->appendToNode($this->node, $new);
	}

	protected function setStyle($style) {
		if (get_class($style) == "style") {
			$this->node->setAttribute("table:style-name", $style->getName());
		}
	}
}

class spreadsheet_cell extends odsXml {

	public function __construct(&$node, $value, $type, $style) {
		parent::__construct($node);

		switch ($type) {
			case "float":
				$value = 0 + $value;
				break;
			case "time":
				$time = explode(":", $value);
				if (count($time) != 2) return new spreadsheet_cell($node, "string", $type, $style);
				$hour   = (integer)$time[0]; if ($hour < 10)   $hour   = "0$hour";
				$minute = (integer)$time[1]; if ($minute < 10) $minute = "0$minute";
				$value = "$hour:$minute";
				$this->node->setAttribute("office:time-value", "PT{$hour}H{$minute}M00S");
				break;
			case "date":
				$date = explode("/", $value);
				if (count($date) != 3) return new spreadsheet_cell($node, "string", $type, $style);
				$day   = (integer)$date[0];
				$month = (integer)$date[1];
				$year  = (integer)$date[2];
				if ($year < 100) $year = "20$year";
				if ($month < 10) $month = "0$month";
				if ($day < 10) $day = "0$day";
				$value = "$day/$month/$year";
				$this->node->setAttribute("office:date-value", "$year-$month-$day");
				break;
			case "string":
			default:
				$type = "string";
				$value = htmlentities($value);
				break;
		}

		$this->setStyle($style);
		$this->arrRow[$intColumn]['attrs'] = array('office:value-type' => $type, 'calcext:value-type' => $type);
		$this->node->setAttribute("office:value-type", $type);
		$this->node->setAttribute("calcext:value-type", $type);
		$this->node->setAttribute("office:value", $value);
		$text = $this->node->ownerDocument->createElement("text:p", $value);
		$this->node->appendChild($text);
	}
}

class spreadsheet_row extends odsXml {

	public function __construct(&$node, $style) {
		parent::__construct($node);
		if (strlen($style) > 0) {
			$this->node->setAttribute("table:style-name", htmlentities($style));
		}
	}

	public function addCell($value, $type = "string", $style = "") {
		$cellXml = $this->getSample('table:table-cell');
		$cellNode = $this->append($cellXml);
		return new spreadsheet_cell($cellNode, $value, $type, $style);
	}
}

class spreadsheet extends odsXml {
	private $style;

	public function __construct(&$node, $name) {
		parent::__construct($node);
		$this->node->setAttribute("table:name", htmlentities($name));

		$styleXml = $this->getSample('style:style', "family", "table", "style");

		$doc = $this->node->ownerDocument;
		$result = $doc->getElementsByTagNameNS('urn:oasis:names:tc:opendocument:xmlns:office:1.0', 'automatic-styles');
		if ($result->length <= 0) return NULL;
		$styleNode = $this->appendToNode($result->item(0), $styleXml);
		$this->style = new style($styleNode, "cell");
		$this->setStyle($this->style);
	}

	public function setRtl($rtl = true) {
		$this->style->set(array("table" => array("style:writing-mode" => "rl-tb")));
	}

	public function addRow($style = "ro1") {
		$rowXml = $this->getSample('table:table-row');
		$rowNode = $this->append($rowXml);
		return new spreadsheet_row($rowNode, $style);
	}
}

class style extends odsXml {
	private static $nameCounter = 1;
	private $name;

	public function __construct(&$node, $type) {
		parent::__construct($node);
		$this->name = $type . self::$nameCounter;
		self::$nameCounter++;
		$this->node->setAttribute("style:name", $this->name);
	}

	public function getName() {
		return $this->name;
	}

	public function copy() {
		$newStyle = $this->node->cloneNode(true);
		$this->node->parentNode->appendChild($newStyle);
		return new style($newStyle, "cell");
	}

	public function set($newValues) {
		foreach ($newValues as $type => $attr) {
			$item = null;
			switch ($type) {
				case "top":
					$item = $this->node;
					break;
				case "cell":
					$item = $this->getChild("style:table-cell-properties");
					break;
				case "paragraph":
					$item = $this->getChild("style:paragraph-properties");
					break;
				case "text":
					$item = $this->getChild("style:text-properties");
					break;
				case "table":
					$item = $this->getChild("style:table-properties");
					break;
			}
			if ($item) {
				foreach ($attr as $name => $value) {
					$item->setAttribute($name, $value);
				}
			}
		}
		return $this;
	}
}

class ods extends odsXml {
	
	protected $contentXml;
	protected $arrRow;
	protected $intColumn;
	private $contentHeader = null;

	public function __construct() {
		parent::__construct($this);
		$this->contentXml = simplexml_load_file(__DIR__ . '/oo-base/content.xml');
		$this->intColumn = 0;
		$this->arrRow = array();
	}

	public function addSheet($name = "Sheet 1") {
		$tableXml = $this->getSample('table:table');

		$this->contentXml->registerXPathNamespace("o", "urn:oasis:names:tc:opendocument:xmlns:office:1.0");
		$result = $this->contentXml->xpath('//o:spreadsheet');
		if (! $result) return NULL;
		$spreadsheet = dom_import_simplexml($result[0]);
		$spreadsheetNode = $this->appendToNode($spreadsheet, $tableXml);
		return new spreadsheet($spreadsheetNode, $name);
	}

	public function addStyle() {
		$styleXml = $this->getSample('style:style', "family", "table-cell", "style");

		$this->contentXml->registerXPathNamespace("o", "urn:oasis:names:tc:opendocument:xmlns:office:1.0");
		$result = $this->contentXml->xpath('//o:automatic-styles');
		if (! $result) return NULL;
		$styleList = dom_import_simplexml($result[0]);
		$styleNode = $this->appendToNode($styleList, $styleXml);
		return new style($styleNode, "cell");
	}

	private function getMeta() {
		$meta = simplexml_load_file(__DIR__ . '/oo-base/meta.xml');
		$meta->registerXPathNamespace("m", "urn:oasis:names:tc:opendocument:xmlns:meta:1.0");
		$result = $meta->xpath('//m:creation-date');
		if ($result) {
			$result[0][0] = date('Y-m-d') . "T" . date('G:i:s');
		}
		return $meta->asXML();
	}

	public function setHeader($header) {
		$this->contentHeader = $header;
	}

	private function getStyles() {
		$meta = simplexml_load_file(__DIR__ . '/oo-base/styles.xml');
		if ($this->contentHeader) {
			$meta->registerXPathNamespace("style", "urn:oasis:names:tc:opendocument:xmlns:style:1.0");
			$result = $meta->xpath('//style:header/text:p');
			if ($result) {
				$result[0][0] = $this->contentHeader;
			}
		}
		return $meta->asXML();
	}

	public function save($fileName) {
		$zip = new ZipArchive;
		if ($zip->open($fileName, ZipArchive::CREATE)!==TRUE) {
			throw("Cannot open file '{$fileName}'");
		}
		$zip->addEmptyDir('META-INF/');

		$zip->addFromString('styles.xml', $this->getStyles());
		$zip->addFile(__DIR__ . '/oo-base/mimetype', 'mimetype');
		$zip->addFromString('meta.xml', $this->getMeta());
		$zip->addFile(__DIR__ . '/oo-base/META-INF/manifest.xml', 'META-INF/manifest.xml');
		$zip->addFromString('content.xml', $this->contentXml->asXML());
	}

	public function send($fileName = "data.ods") {
		$tempFileName = tempnam("/tmp", "ods");
		$this->save($tempFileName);

		header('Content-disposition: attachment; filename="'.$fileName.'"');
		header('Content-Type: application/vnd.oasis.opendocument.spreadsheet');
		header('Content-Length: ' . filesize($tempFileName));
		readfile($tempFileName);
		unlink($tempFileName);
	}
}

?>
